import { useState } from "react";
import { useQuery, useMutation, gql } from "@apollo/client";
import Head from "next/head";
import Link from "next/link";
import {
  PageHeader,
  Input,
  Button,
  Typography,
  Modal,
  Space,
  Card,
  Descriptions,
  Skeleton,
  DatePicker
} from "antd";
import dayjs from "dayjs";

const { Title } = Typography;
const { confirm } = Modal;

const ALL_FAMILIES = gql`
  query GetFamilies {
    families: familiesByDeleted(deleted: false) {
      data {
        _id
        primaryFirstName
        primaryLastName
        secondaryFirstName
        secondaryLastName
        children {
          data {
            age
          }
        }
      }
    }
  }
`;

const DELETE_FAMILY = gql`
   mutation DeleteFamily($id: ID!) {
     updateFamily(id: $id, data: { deleted: true}) {
      _id
    }
  }
`;

export default function FamilyList() {
  const [search, setSearch] = useState("");
  const [chosenDate, setChosenDate] = useState(null);
  const [printModalOpen, setPrintModalOpen] = useState(false);
  const { loading, data, refetch } = useQuery(ALL_FAMILIES, { fetchPolicy: "no-cache" });
  const onCompleted = () => {
    refetch();
  };
  const [deleteFamily] = useMutation(DELETE_FAMILY, {
    onCompleted,
  });
  const confirmDelete = (id) => () => {
    confirm({
      title: "Are you sure you want to delete?",
      onOk() {
        deleteFamily({
          variables: { id },
        });
      },
    });
  };
  return (
    <div>
      <Head>
        <title>All Families - CheerFund</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageHeader
        title="All Families"
        subTitle="List of families"
        backIcon={false}
        extra={[
          <a href="/api/full-list" download>
            <Button type="primary">Download Full List</Button>
          </a>,
          <a href="/api/kids-list" download>
            <Button type="primary">Download Kids List</Button>
          </a>,
          <Button type="primary" onClick={() => setPrintModalOpen(true)}>Print</Button>
        ]
        }
      />
      <Modal title="Print between..." visible={printModalOpen} onCancel={() => setPrintModalOpen(false)} footer={[
        <Space>
          <Button onClick={() => setPrintModalOpen(false)} type="ghost">Cancel</Button>
          <a target="_blank" href={`/api/print/full-sheet?from=${dayjs(chosenDate[0]).format("MM/DD/YYYY")}&to=${dayjs(chosenDate[1]).format("MM/DD/YYYY")}`}><Button type="primary">Print Full Sheets</Button></a>
          <a target="_blank" href={`/api/print/letter?from=${dayjs(chosenDate[0]).format("MM/DD/YYYY")}&to=${dayjs(chosenDate[1]).format("MM/DD/YYYY")}`}><Button type="primary">Print Full Sheets</Button></a>
        </Space>
      ]}>
        <DatePicker.RangePicker format="MM/DD/YYYY" value={chosenDate} onChange={(value) => setChosenDate(value)} />
      </Modal>
      <Skeleton active loading={loading}>
        <Space direction="vertical" style={{ width: "100%" }}>
          <Input
            onChange={(e) => setSearch(e.target.value)}
            value={search}
            placeholder="Search for a family..."
          />
          {data?.families.data
            .filter((family) => {
              if (!search) {
                return family;
              }
              return `${family.primaryFirstName}${family.primaryLastName}`
                .toLowerCase()
                .includes(search.toLowerCase());
            })
            .map((family) => {
              const {
                _id,
                primaryFirstName,
                primaryLastName,
                secondaryFirstName,
                secondaryLastName,
                children,
              } = family;
              return (
                <Card
                  key={_id}
                  actions={[
                    <Link href={`/families/${_id}`} key="view">
                      <Button type="primary">View Family</Button>
                    </Link>,
                    <Button type="danger" onClick={confirmDelete(_id)}>Remove Family</Button>,
                  ]}
                >
                  <Title level={4}>
                    {primaryFirstName} {primaryLastName}
                  </Title>
                  <Descriptions>
                    <Descriptions.Item label="Secondary Adult">
                      {secondaryFirstName} {secondaryLastName}
                    </Descriptions.Item>
                    <Descriptions.Item label="Number of children">
                      {children.data.length}
                    </Descriptions.Item>
                  </Descriptions>
                </Card>
              );
            })}
        </Space>
      </Skeleton>
    </div >
  );
}
