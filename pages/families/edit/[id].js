import { useRouter } from "next/router";
import { useMutation, gql, useQuery } from "@apollo/client";
import Head from "next/head";
import {
  Form,
  PageHeader,
  Input,
  Button,
  Checkbox,
  Typography,
  Row,
  Col,
  Divider,
  Select,
  Space,
  Card,
  Affix,
  Skeleton,
} from "antd";
import { PlusOutlined } from "@ant-design/icons";
import { omit } from "lodash";

import cities from "../../../services/cities";

const { Title, Text } = Typography;

const UPDATE_FAMILY = gql`
  mutation UpdateFamily($id: ID!, $data: FamilyInput!) {
    updateFamily(id: $id, data: $data) {
      _id
    }
  }
`;

const UPDATE_CHILD = gql`
  mutation UpdateChild($id: ID!, $data: ChildInput!) {
    updateChild(id: $id, data: $data) {
      _id
    }
  }
`;

const GET_FAMILY = gql`
  query GetFamily($id: ID!) {
    family: findFamilyByID(id: $id) {
      _id
      primaryFirstName
      primaryLastName
      secondaryFirstName
      secondaryLastName
      address
      aptNo
      city
      zip
      phone1
      phone2
      deleted
      createdAt
      children {
        data {
          _id
          firstName
          lastName
          gender
          age
          ageType
          notes
          school
          createdAt
        }
      }
    }
  }
`;

export default function EditFamily() {
  const router = useRouter();
  const { id } = router.query;

  const { loading, error, data } = useQuery(GET_FAMILY, {
    variables: { id },
    fetchPolicy: "no-cache",
  });
  const onCompleted = (data) => {
    router.push(`/families/${data.updateFamily._id}`);
  };
  const [updateChild] = useMutation(UPDATE_CHILD);
  const [updateFamily] = useMutation(UPDATE_FAMILY, {
    onCompleted,
  });
  const onFinish = (values) => {
    const { children } = values;
    const addedChildren = children.filter((child) => !child._id);
    const editedChildren = children.filter((child) => child._id);
    const removedChildren = data.family.children.data.filter(
      (child) => children.findIndex((c) => c._id === child._id) === -1
    );

    editedChildren.forEach((child) => {
      updateChild({
        variables: {
          id: child._id,
          data: {
            ...omit(child, ["__typename", "_id"]),
            age: Number(child.age),
          },
        },
      });
    });
    removedChildren.forEach((child) => {
      updateChild({
        variables: {
          id: child._id,
          data: {
            ...omit(child, ["__typename", "_id"]),
            family: {
              disconnect: true,
            },
          },
        },
      });
    });
    updateFamily({
      variables: {
        id,
        data: {
          ...omit(values, ["_id", "__typename", "children"]),
          zip: cities.find((c) => c.city === values.city).zip.toString(),
          createdAt: family.createdAt,
          children: {
            create: addedChildren.map((child) => ({
              ...child,
              age: Number(child.age),
              createdAt: new Date(),
            })),
          },
        },
      },
    });
  };
  if (loading || !data) return <Skeleton active loading={loading} />;
  const family = {
    ...data.family,
    children: data.family.children.data,
  };
  return (
    <div>
      <Head>
        <title>Edit Family - CheerFund</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PageHeader
        title="Edit Family"
        subTitle="Edit a family"
        backIcon={false}
      />
      <Form layout="vertical" onFinish={onFinish} initialValues={family}>
        <Title level={3}>Primary Adult</Title>
        <Row gutter={24}>
          <Col span={12}>
            <Form.Item label="First Name" name="primaryFirstName" rules={[{ required: true }]}>
              <Input />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item label="Last Name" name="primaryLastName" rules={[{ required: true }]}>
              <Input />
            </Form.Item>
          </Col>
        </Row>
        <Divider />
        <Title level={3}>Secondary Adult</Title>
        <Row gutter={24}>
          <Col span={12}>
            <Form.Item label="First Name" name="secondaryFirstName" >
              <Input />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item label="Last Name" name="secondaryLastName">
              <Input />
            </Form.Item>
          </Col>
        </Row>
        <Divider />
        <Row gutter={24}>
          <Col span={12}>
            <Form.Item label="Address" name="address" rules={[{ required: true }]}>
              <Input />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item label="Apt/Lot No." name="aptNo">
              <Input />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item label="City" name="city" rules={[{ required: true }]}>
              <Select showSearch>
                {cities.map(({ city }) => (
                  <Select.Option value={city}>{city}</Select.Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item
              label="Zip"
              shouldUpdate={(prevValues, currentValues) =>
                prevValues.city !== currentValues.city
              }
            >
              {({ getFieldValue }) => {
                const city = getFieldValue("city");
                if (!city) return <Text secondary>Select a city</Text>;
                return cities.find((c) => c.city === city).zip;
              }}
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item label="Phone #1" name="phone1" rules={[{ required: true }]}>
              <Input />
            </Form.Item>
          </Col>
          <Col span={12}>
            <Form.Item label="Phone #2" name="phone2">
              <Input />
            </Form.Item>
          </Col>
        </Row>
        <Divider />
        <Form.List name="children">
          {(fields, { add, remove }, { errors }) => (
            <Row>
              <Space direction="vertical">
                {fields.map(({ key, name, fieldKey, ...restField }) => (
                  <Card
                    key={key}
                    actions={[
                      <Button onClick={() => remove(name)} key="remove">
                        Remove Child
                      </Button>,
                    ]}
                  >
                    <Row gutter={24}>
                      <Col span={12}>
                        <Form.Item
                          {...restField}
                          label="First Name"
                          name={[name, "firstName"]}
                          fieldKey={[fieldKey, "firstName"]}
                          rules={[{ required: true }]}
                        >
                          <Input />
                        </Form.Item>
                      </Col>
                      <Col span={12}>
                        <Form.Item
                          {...restField}
                          label="Last Name"
                          name={[name, "lastName"]}
                          fieldKey={[fieldKey, "lastName"]}
                          rules={[{ required: true }]}
                        >
                          <Input />
                        </Form.Item>
                      </Col>
                      <Col span={6}>
                        <Form.Item
                          {...restField}
                          label="Gender"
                          name={[name, "gender"]}
                          fieldKey={[fieldKey, "gender"]}
                          rules={[{ required: true }]}
                        >
                          <Select showSearch>
                            <Select.Option value="BOY">Boy</Select.Option>
                            <Select.Option value="GIRL">Girl</Select.Option>
                          </Select>
                        </Form.Item>
                      </Col>
                      <Col span={6}>
                        <Form.Item
                          {...restField}
                          label="School"
                          name={[name, "school"]}
                          fieldKey={[fieldKey, "school"]}
                        >
                          <Input />
                        </Form.Item>
                      </Col>
                      <Col span={6}>
                        <Form.Item
                          {...restField}
                          label="Age"
                          name={[name, "age"]}
                          fieldKey={[fieldKey, "age"]}
                          rules={[{ required: true }]}
                        >
                          <Input type="number" />
                        </Form.Item>
                      </Col>
                      <Col span={6}>
                        <Form.Item
                          {...restField}
                          label="Years/Months"
                          name={[name, "ageType"]}
                          fieldKey={[fieldKey, "ageType"]}
                          rules={[{ required: true }]}
                        >
                          <Select showSearch>
                            <Select.Option value="YEAR">Years</Select.Option>
                            <Select.Option value="MONTH">Months</Select.Option>
                          </Select>
                        </Form.Item>
                      </Col>
                      <Col span={24}>
                        <Form.Item
                          {...restField}
                          label="Notes"
                          name={[name, "notes"]}
                          fieldKey={[fieldKey, "notes"]}
                        >
                          <Input.TextArea rows={2} />
                        </Form.Item>
                      </Col>
                    </Row>
                  </Card>
                ))}
              </Space>
              <Form.Item style={{ marginTop: "16px" }}>
                <Button
                  type="dashed"
                  onClick={() => add()}
                  block
                  icon={<PlusOutlined />}
                >
                  Add Child
                </Button>
              </Form.Item>
              <Divider />
            </Row>
          )}
        </Form.List>
        <Affix offsetBottom={10}>
          <Card>
            <Row align="center">
              <Button size="large" htmlType="submit" type="primary">
                Save Family
              </Button>
            </Row>
          </Card>
        </Affix>
      </Form>
    </div>
  );
}
